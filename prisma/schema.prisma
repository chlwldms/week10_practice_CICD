// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(10)
  nickname String @db.VarChar(50)
  email String @db.VarChar(30)
  gender String @db.Char(1)
  birth DateTime @db.Date
  address String @db.VarChar(200)
  point Int @default(0)
  phoneNumber String? @db.VarChar(20) @map("phone_number")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime? @map("updated_at")
  inactiveDate DateTime? @map("inactive_date")
  status String @db.VarChar(15) @default("active")

  userFavorCategories UserFavorCategory[]
  userReviews UserReview[]
  userMissions UserMission[]

  @@map("user")
}

model FoodCategory {
  id Int @id @default(autoincrement())
  foodType String @db.VarChar(10) @map("food_type")
  createdAt DateTime @default(now()) @map("created_at")
  upadatedAt DateTime? @map("updated_at")

  userFavorCategories UserFavorCategory[]

  @@map("preferred_food")
}

model UserFavorCategory {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
  foodCategory FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int @map("food_id")
  createdAt DateTime @default(now()) @map("created_at")
  upadatedAt DateTime? @map("updated_at")

  @@index([foodCategoryId], map: "f_category_id") // index 생성
  @@index([userId], map: "user_id")
  @@map("user_preferred_food")
}

model Restaurant {
  id Int @id @default(autoincrement())
  restaurantName String @db.VarChar(20) @map("restaurant_name")
  address String @db.VarChar(200) @unique
  createdAt DateTime @default(now()) @map("created_at")
  upadatedAt DateTime? @map("updated_at")

  userReviews UserReview[]
  missions Mission[]


  @@map("restaurant")
}

model UserReview{
  id Int @id @default(autoincrement())
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int @map("restaurant_id")
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
  score Int @default(0)
  review String @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  upadatedAt DateTime? @map("updated_at")

  @@map("review")
}

model Mission {
  id Int @id @default(autoincrement())
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int @map("restaurant_id")
  price Int @default(0)
  point Int @default(0)
  status String @db.VarChar(20)
  description String @db.Text
  startDate DateTime @map("start_date")
  endDate DateTime @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  upadatedAt DateTime? @map("updated_at")

  userMissions UserMission[]

  @@map("mission")
}

model UserMission {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
  mission Mission @relation(fields: [missionId], references: [id])
  missionId Int @map("mission_id")
  status String @db.VarChar(20) @default("inactive")
  createdAt DateTime @default(now()) @map("created_at")
  upadatedAt DateTime? @map("updated_at")

  @@map("user_mission")
}


model Session {
  id String @id @db.VarChar(200)
  sid String @unique @db.VarChar(200)
  data String @db.VarChar(1024)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}